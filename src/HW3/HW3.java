/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import static java.awt.event.MouseEvent.BUTTON1;
import static java.awt.event.MouseEvent.BUTTON2;
import static java.awt.event.MouseEvent.BUTTON3;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Arrays;


/**
 *
 * @author kavyagautam
 */
public class HW3 extends javax.swing.JFrame {
    
    /**
     * Creates new form sampleUI
     */
    public HW3() {
        
        sd = new spatialData();
        rp_x = new ArrayList<>();
        rp_y = new ArrayList<>();
        rb_fh_click_x = 0;
        rb_fh_click_y = 0;
        print_query = false;
        cb_buildings = cb_fh = cb_bof =  false;
        rb_wholearea = rb_rangearea = rb_NN = rb_fh = false;
        print_fh = print_buildings = print_bof = false;
        mouse_l = mouse_r = mouse_m = false;
        counter = 1;
        
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clearquery = new javax.swing.JButton();
        Buildings = new javax.swing.JCheckBox();
        wholearea = new javax.swing.JRadioButton();
        bof = new javax.swing.JCheckBox();
        fh = new javax.swing.JCheckBox();
        imagemap = new javax.swing.JLabel();
        sendquery = new javax.swing.JButton();
        rangearea = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        CurrentMouse = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        buildingNN = new javax.swing.JRadioButton();
        closestFH = new javax.swing.JRadioButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Querypane = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("KAVYA GAUTAM - W1166971");

        clearquery.setText("Clear Query");
        clearquery.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearqueryMouseClicked(evt);
            }
        });
        clearquery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearqueryActionPerformed(evt);
            }
        });

        Buildings.setText("Buildings");
        Buildings.setActionCommand("buildings");
        Buildings.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BuildingsMouseClicked(evt);
            }
        });
        Buildings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BuildingsActionPerformed(evt);
            }
        });

        wholearea.setText("Whole Region");
        wholearea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                wholeareaMouseClicked(evt);
            }
        });
        wholearea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wholeareaActionPerformed(evt);
            }
        });

        bof.setText("Buildings on Fire");
        bof.setActionCommand("buildings");
        bof.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bofMouseClicked(evt);
            }
        });
        bof.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bofActionPerformed(evt);
            }
        });

        fh.setText("Fire Hydrants");
        fh.setActionCommand("buildings");
        fh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fhMouseClicked(evt);
            }
        });
        fh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fhActionPerformed(evt);
            }
        });

        imagemap.setIcon(new javax.swing.ImageIcon(getClass().getResource("map.jpg"))); // NOI18N
        imagemap.setText("imagemap");
        imagemap.setPreferredSize(new java.awt.Dimension(820, 580));
        imagemap.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                imagemapMouseMoved(evt);
            }
        });
        imagemap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imagemapMouseClicked(evt);
            }
        });

        sendquery.setText("Send Query");
        sendquery.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sendqueryMouseClicked(evt);
            }
        });
        sendquery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendqueryActionPerformed(evt);
            }
        });

        rangearea.setText("Range Query");
        rangearea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rangeareaMouseClicked(evt);
            }
        });
        rangearea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangeareaActionPerformed(evt);
            }
        });

        CurrentMouse.setColumns(20);
        CurrentMouse.setRows(5);
        CurrentMouse.setText("Current Mouse Location: ");
        CurrentMouse.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                CurrentMouseMouseMoved(evt);
            }
        });
        jScrollPane1.setViewportView(CurrentMouse);

        jLabel1.setText("Active Feature Type");

        jLabel2.setText("Query");

        buildingNN.setText("Find Neighbor Buildings");
        buildingNN.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buildingNNMouseClicked(evt);
            }
        });

        closestFH.setText("Find Closest Fire Hydrants");
        closestFH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closestFHMouseClicked(evt);
            }
        });

        Querypane.setColumns(20);
        Querypane.setRows(5);
        jScrollPane2.setViewportView(Querypane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(imagemap, javax.swing.GroupLayout.PREFERRED_SIZE, 830, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator4)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rangearea, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(wholearea, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(fh, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(12, 12, 12)))
                        .addGap(35, 35, 35))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jSeparator2)
                                .addComponent(bof, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                                .addComponent(Buildings, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jSeparator1)
                                .addComponent(jSeparator3))
                            .addComponent(clearquery)
                            .addComponent(sendquery)
                            .addComponent(buildingNN)
                            .addComponent(closestFH))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1054, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 437, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Buildings)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bof, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fh, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel2)
                        .addGap(10, 10, 10)
                        .addComponent(wholearea)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rangearea)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buildingNN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closestFH)
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(sendquery)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearquery))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(imagemap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void wholeareaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wholeareaActionPerformed

    }//GEN-LAST:event_wholeareaActionPerformed

    private void BuildingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BuildingsActionPerformed
        
    }//GEN-LAST:event_BuildingsActionPerformed

    private void bofActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bofActionPerformed

    }//GEN-LAST:event_bofActionPerformed

    private void fhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fhActionPerformed

    }//GEN-LAST:event_fhActionPerformed

    private void bofMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bofMouseClicked
        cb_bof = bof.isSelected();
        if (cb_bof) {
            System.out.println("set bof");
        } else {
            System.out.println("Clear bof");
        }
    }//GEN-LAST:event_bofMouseClicked

    private void BuildingsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BuildingsMouseClicked
           //cb_buildings = true;
        cb_buildings = Buildings.isSelected();
        if (cb_buildings) {
            System.out.println("Set buildings");
        } else {
            System.out.println("Clear buildings");
        }
    }//GEN-LAST:event_BuildingsMouseClicked

    private void fhMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fhMouseClicked
        cb_fh = fh.isSelected();
        if (cb_fh) {
            System.out.println("set fire hydrant");
        } else {
            System.out.println("Clear fire hydrant");
        }
    }//GEN-LAST:event_fhMouseClicked

    private void wholeareaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_wholeareaMouseClicked
        rp_x.clear();
        rp_y.clear();
        sd.QueryDisplayArray.clear();
        clear();
        rb_wholearea = true;
        System.out.println("set wholearea");
        wholearea.setSelected(true);
        rangearea.setSelected(false);
        rb_rangearea = false;  
        closestFH.setSelected(false);
        rb_fh = false;
        buildingNN.setSelected(false);
        rb_NN = false;
    }//GEN-LAST:event_wholeareaMouseClicked

    private void drawBuildings (Graphics g) {
        if (print_buildings) {
            g.setColor(Color.YELLOW);
            Graphics2D g2 = (Graphics2D) g;
            g2.setStroke(new BasicStroke(2));
            int pl = 0;
            if (spatialData.buildings_l != null && spatialData.buildings_x != null && spatialData.buildings_y != null) {
                for (int i=0; i<spatialData.buildings_l.length; i++) {
                    for (int j=0; j < spatialData.buildings_l[i]; j++) {
                        if ((j+1) != spatialData.buildings_l[i]) {
                            if (((pl+j) > spatialData.buildings_x.length) || ((pl+j) > spatialData.buildings_x.length))  { break; }
                            else{
                            g.drawLine((spatialData.buildings_x[pl+j]).intValue(), (spatialData.buildings_y[pl+j]).intValue(), 
                                       (spatialData.buildings_x[pl+j+1]).intValue(), (spatialData.buildings_y[pl+j+1]).intValue()); }
                        }
                    }
                    pl += spatialData.buildings_l[i];
                }
            }
                     
        }        
    }
        
    private void drawFireHydrant(Graphics g) {
        if (print_fh) {
            g.setColor(Color.GREEN);
            Graphics2D g2 = (Graphics2D) g;
            g2.setStroke(new BasicStroke(3));

            if (sd.fh_x != null && sd.fh_y != null) {
                for (int i=0; i<sd.fh_x.length; i++) {
                    g.fillRect(sd.fh_x[i].intValue() - 4, sd.fh_y[i].intValue() - 4, 8, 8);
                }
            }
        }
    }           
               
   
  
    private void drawBuildingsOnFire(Graphics g) {
        if (print_bof) {
            g.setColor(Color.RED);
            Graphics2D g2 = (Graphics2D) g;
            g2.setStroke(new BasicStroke(3));
            int pl = 0; // previous building length
            if (sd.bof_l != null && sd.bof_x != null && sd.bof_y != null) {
                for (int i=0; i<sd.bof_l.length; i++) {
                    for (int j=0; j < sd.bof_l[i]; j++) {
                        if ((j+1) != sd.bof_l[i]) {
                            g.drawLine(sd.bof_x[pl+j].intValue(), sd.bof_y[pl+j].intValue(), 
                                       sd.bof_x[pl+j+1].intValue(), sd.bof_y[pl+j+1].intValue()); 
                        }
                    }
                    pl += sd.bof_l[i];
                }
            }
            g.finalize();            
        }        
    }
    public void print_query(){
        
        //if(Querypane.isShowing()){Querypane.remove(counter);}
        if (print_query){          
           for (int i =0; i< sd.QueryDisplayArray.size(); i++) {
                Querypane.append("\n Query " + counter + " : " + sd.QueryDisplayArray.get(i)); 
                counter++; 
            }
 
        }
    }
    

     private void clear() {
         Graphics g;
         g = getContentPane().getGraphics();
         g.clearRect(0,0,820,580);
         imagemap.setOpaque(false);
         g.finalize();
         getContentPane().update(g);
     }


    
    private void drawRangePolygon(Graphics g) {   

        System.out.println("Print x coordinates");
	for (int i = 0; i < rp_x.size(); i++) {
            System.out.println("X : " + rp_x.get(i) + " Y : " + rp_y.get(i));
	}        
        
        if (rp_x != null && rp_y != null) {
            if (rp_x.size() > 1) {
                g.setColor(Color.RED);
                Graphics2D g2 = (Graphics2D) g;
                g2.setStroke(new BasicStroke(3));
                int i;
                for (i = 0; i < rp_x.size() - 1; i++) {
                    g.drawLine(rp_x.get(i), rp_y.get(i),
                            rp_x.get(i+1), rp_y.get(i+1));
                }
                if (mouse_r) {
                    g.drawLine(rp_x.get(i), rp_y.get(i),                 
                            rp_x.get(0), rp_y.get(0));
                }
                
                g.finalize();
            }
        }       
    }  

    private void draw() {
        Graphics g;
        g = getContentPane().getGraphics();
        clear();
        drawBuildings(g);
        drawFireHydrant(g);
        drawBuildingsOnFire(g);
        drawRangePolygon(g);
        print_query();

        
    }
        
    private void clearqueryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearqueryMouseClicked
        clear();
        Querypane.removeAll();
        sd.QueryDisplayArray.clear();;
    }//GEN-LAST:event_clearqueryMouseClicked

    private void sendqueryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sendqueryMouseClicked
        if ((rb_wholearea || rb_rangearea) && cb_fh) {
            // Highlight firehydrant coordinates
            print_fh = true;
            print_query = true;
            System.out.println("Highlighting fire hydrants");
        } else {
            print_fh = false;            
        }
        
        if ((rb_NN) || ((rb_wholearea || rb_rangearea) && cb_buildings)) {
            System.out.println("Highlighting buildings");
            print_buildings = true;
            print_query = true;
        } else {
            print_buildings = false;
        }
        
        if ((rb_NN) || ((rb_wholearea || rb_rangearea) && cb_bof)) {
            System.out.println("Highlighting bof");
            print_bof = true;
            print_query = true;
        } else {
            print_bof = false;
        }
        
        if ((rb_rangearea) && (!mouse_r)){
            return;
        }
        if (rb_fh){
            return;
        }
        
        try {
            
            
            sd.processQueries(cb_buildings,  cb_fh,  cb_bof, rb_wholearea,  rb_rangearea,  rb_NN,  rb_fh, rp_x, rp_y, rb_fh_click_x, rb_fh_click_y);
            
        } catch (Exception ex) {
            Logger.getLogger(HW3.class.getName()).log(Level.SEVERE, null, ex);
        }
        draw();      
    }//GEN-LAST:event_sendqueryMouseClicked

    private void sendqueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendqueryActionPerformed

    }//GEN-LAST:event_sendqueryActionPerformed

    private void clearqueryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearqueryActionPerformed

    }//GEN-LAST:event_clearqueryActionPerformed

    private void rangeareaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangeareaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rangeareaActionPerformed

    private void rangeareaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rangeareaMouseClicked
        clear();
        sd.QueryDisplayArray.clear();
        rb_rangearea = true;
        System.out.println("set rangearea");
        rangearea.setSelected(true);
       
        wholearea.setSelected(false);
        rb_wholearea = false;
        closestFH.setSelected(false);
        rb_fh = false;
        buildingNN.setSelected(false);
        rb_NN = false;
        
       
    }//GEN-LAST:event_rangeareaMouseClicked

    private void imagemapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imagemapMouseClicked

        Graphics g;
        g = getContentPane().getGraphics();
        
        if (rb_rangearea && (evt.getButton() != BUTTON2)) {
            
            if (evt.getButton() == BUTTON3) {
                System.out.println("Set rightclick");
                mouse_r = true; 
            } 
            
            if (evt.getButton() == BUTTON1) {
                if (mouse_r) {
                    clear();
                    rp_x.clear();
                    rp_y.clear();
                    mouse_r = false;
                }
                System.out.println("Set leftclick");
                mouse_l = true;
            }

            /* Populate polygon arrays */
            if (!mouse_r) {
                rp_x.add(evt.getX());
                rp_y.add(evt.getY());
            } 
            
            drawRangePolygon(g);
        }
        if (rb_fh){
            //Polygon p = new Polygon();
            rb_fh_click_x = evt.getX();
            rb_fh_click_y = evt.getY();
            print_query = true;
            print_query();
            try {
                sd.processQueries(cb_buildings,  cb_fh,  cb_bof, rb_wholearea,  rb_rangearea,  rb_NN,  rb_fh, rp_x, rp_y, rb_fh_click_x, rb_fh_click_y);
            } catch (Exception ex) {
                Logger.getLogger(HW3.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (sd.closestfh_x != null && sd.closestfh_y != null) {
                g.setColor(Color.GREEN);
                Graphics2D g2 = (Graphics2D) g;
                g2.setStroke(new BasicStroke(3));
                for (int i=0; i<sd.closestfh_x.length; i++) {
                    g.fillRect(sd.closestfh_x[i].intValue() - 4, sd.closestfh_y[i].intValue() - 4, 8, 8);
                }
            }
            
            
            if (spatialData.FHRB_x != null && spatialData.FHRB_y!= null && spatialData.FHRB_l != 0) {
               g.setColor(Color.RED);
                Graphics2D g2 = (Graphics2D) g;
                g2.setStroke(new BasicStroke(3));           
                Polygon p = new Polygon();

                for (int i = 0; i< sd.FHRB_l; i++){
                    p.addPoint(sd.FHRB_x[i].intValue(), sd.FHRB_y[i].intValue());
                }
                g.drawPolygon(p); 
            }
  
        }
    }//GEN-LAST:event_imagemapMouseClicked

    private void CurrentMouseMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CurrentMouseMouseMoved
        // TODO add your handling code here:
          
    }//GEN-LAST:event_CurrentMouseMouseMoved

    private void imagemapMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imagemapMouseMoved
        // TODO add your handling code here:
        CurrentMouse.setText("Current Mouse Location:  (" + evt.getX() + "," + evt.getY() + ")");
    }//GEN-LAST:event_imagemapMouseMoved

    private void buildingNNMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buildingNNMouseClicked
        // TODO add your handling code here:
        sd.QueryDisplayArray.clear();        
        rp_x.clear();
        rp_y.clear();
        clear();
        rb_NN = true;
        System.out.println("set buildingNN");
        buildingNN.setSelected(true);
       
        wholearea.setSelected(false);
        rb_wholearea = false;
        rangearea.setSelected(false);
        rb_rangearea = false;
        closestFH.setSelected(false);
        rb_fh = false;
    }//GEN-LAST:event_buildingNNMouseClicked

    private void closestFHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closestFHMouseClicked
        // TODO add your handling code here:
        sd.QueryDisplayArray.clear();
        rp_x.clear();
        rp_y.clear();
        clear();
        rb_fh = true;
        System.out.println("set buildingNN");
        closestFH.setSelected(true);
       
        wholearea.setSelected(false);
        rb_wholearea = false;
        rangearea.setSelected(false);
        rb_rangearea = false;
        buildingNN.setSelected(false);
        rb_NN = false;
    }//GEN-LAST:event_closestFHMouseClicked

        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HW3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HW3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HW3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HW3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
            
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HW3().setVisible(true);
            }
        });
        
    }

    static boolean print_fh, print_buildings, print_bof;
    static boolean rb_wholearea, rb_rangearea, rb_NN, rb_fh;
    static boolean cb_buildings, cb_fh, cb_bof;
    static boolean mouse_l, mouse_r, mouse_m;
    static private ArrayList<Integer> rp_x, rp_y;
    static private int rb_fh_click_x, rb_fh_click_y;
    spatialData sd;
    static boolean print_query;
    int counter;
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox Buildings;
    private javax.swing.JTextArea CurrentMouse;
    private javax.swing.JTextArea Querypane;
    private javax.swing.JCheckBox bof;
    private javax.swing.JRadioButton buildingNN;
    private javax.swing.JButton clearquery;
    private javax.swing.JRadioButton closestFH;
    private javax.swing.JCheckBox fh;
    private javax.swing.JLabel imagemap;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JRadioButton rangearea;
    private javax.swing.JButton sendquery;
    private javax.swing.JRadioButton wholearea;
    // End of variables declaration//GEN-END:variables
}
